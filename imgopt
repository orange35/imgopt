#!/usr/bin/env bash

VERSION='0.1.0'
TIME_MARKER_FILE=".imgopt"

warn()
{
    if [ -z "$quiet" ] && [ ! -z "$verbose" ]; then
        (>&2 echo -e "\e[1;38;05;9m$1\e[m")
    fi
}

log()
{
    if [ ! -z "$logFile" ]; then
        time=$(date '+%Y-%m-%d %H:%M:%S')
        echo -e "[$time]\t$1" >> $logFile
    fi
}

out()
{
    if [ -z "$quiet" ]; then
        echo "$1"
    fi
}

throw()
{
    warn "$1"
    exit 1
}

optimize()
{
    local file="$1"
    local error=""
    extension="${file##*.}"
    case $extension in
        png|PNG)
            error=$(oxipng -q -o 4 --strip safe "$file" 2>&1 >/dev/null)
            ;;
        jpg|JPG)
            error=$(jpegtran -copy none -optimize -progressive -outfile "$file" "$file" 2>&1 >/dev/null)
            ;;
        *)
            error="Unsupported file type: $file"
            ;;
    esac
    if [ ! -z "$error" ]; then
        warn "$error: $file"
        log "$error: $file"
    fi
}

bold()
{
    echo -e "\e[1m$1\e[0m"
}

displaytime()
{
    local t=$1
    local d=$((t/60/60/24))
    local h=$((t/60/60))
    local m=$((t/60%60))
    local s=$((t%60))

    printf "%02d:%02d:%02d" $h $m $s
}

progress()
{
    local interval=1
    time=$(date +%s)
    timeDiff=$(($time - $lastTime))
    if [ "$timeDiff" -gt "$interval" ] || [ "$count" = "$total" ]; then
        percent=$(($count * 100 / $total))
        duration=$(($time - $start))
        left=$(($total * $duration / $count - $duration))
        eta=$(($left + $duration))
        echo -ne "\r"
        echo -ne "\e[1;38;05;15mProgress:\e[m $percent% [$count/$total] "
        echo -ne "\e[1;38;05;15mElapsed:\e[m $(displaytime "$duration") "
        echo -ne "\e[1;38;05;15mLeft:\e[m $(displaytime "$left") "
        echo -ne "\e[1;38;05;15mTotal:\e[m $(displaytime "$eta") "
        if [ "$count" = "$total" ]; then
            echo
        fi
        lastTime="$time"
    fi
}

printUsage()
{
    local SCRIPT_NAME=$(basename $0)
    echo "${SCRIPT_NAME} ${VERSION}"
    echo "Usage: ${SCRIPT_NAME} [OPTIONS] $(bold directory)"
    echo "Options:"
    echo "    -h      | --help           display this message and exit"
    echo "    -q      | --quiet          no output"
    echo "    -v      | --verbose        output additional information"
    echo "    -l file | --log file       write a log"
    echo "    -s name | --subdir name    find images only in subdirectories with specific name"
    echo
    echo "Regular usage:"
    echo "    $(bold $TIME_MARKER_FILE) file will be created in the specified $(bold directory) at the end optimization process"
    echo "    and for the next run ${SCRIPT_NAME} will look for images that newer the $(bold $TIME_MARKER_FILE) modification time"
}

if [ $# -eq 0 ]
then
    printUsage
    exit 0;
fi


subdir=""

POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -v|--verbose)
            verbose="v"
            shift
            ;;
        -vv)
            verbose="vv"
            shift
            ;;
        -vvv)
            verbose="vvv"
            shift
            ;;
        -q|--quiet)
            quiet="1"
            shift
            ;;
        -h|--help)
            helpPage
            exit 0
            ;;
        -s|--subdir)
            subdir="$2"
            shift
            shift
            ;;
        -l|--log)
            logFile="$2"
            shift
            shift
            ;;
        *)
            POSITIONAL+=("$1")
            shift
            ;;
    esac
done
set -- "${POSITIONAL[@]}"

if [ $# -ne 1 ]
then
    warn "Too many arguments"
    printUsage
    exit 1;
fi

directory=$1

if [ ! -d "$directory" ] ; then
    throw "Directory not found: $directory"
fi

if [ ! -z "$subdir" ] ; then
    dirs=$(find $directory -type d -name "$subdir")
else
    dirs="$directory"
fi

findOptions=()
lastRunFile="$directory/$TIME_MARKER_FILE"
if [ ! -z "$lastRunFile" ] && [ -f "$lastRunFile" ]; then
    findOptions+=("-newer" "$lastRunFile")
fi

start=$(date +%s)
lastTime="$start"
total=0
for dir in $dirs; do
    count=$(find $dir \( -iname '*.png' -o -iname '*.jpg' \) "${findOptions[@]}" | wc -l)
    total=$(($total + $count))
done

if [ "$total" -eq "0" ]; then
    exit 0;
fi

log "Found $total images for optimization"
count=0
for dir in $dirs; do
    if [[ "$verbose" = "vvv" ]]; then
        echo "CMD: find $dir \( -iname '*.png' -o -iname '*.jpg' \) ${findOptions[@]}"
    fi
    files=$(find $dir \( -iname '*.png' -o -iname '*.jpg' \) "${findOptions[@]}")
    if [ -z "$files" ]; then
        continue
    fi
    for file in $files; do
        count=$(($count + 1))
        optimize "$file"
        if [ -z "$quiet" ]; then
            progress
        fi
    done
done
log "Optimization completed"
touch $lastRunFile
